--- STM8S_SPL_2.2.0/Libraries/STM8S_StdPeriph_Driver/inc/stm8s.h	2014-10-21 18:32:20.000000000 +0200
+++ STM8S_SPL_2.2.0_SDCC/Libraries/STM8S_StdPeriph_Driver/inc/stm8s.h	2015-03-08 18:09:59.000000000 +0100
@@ -84,6 +84,8 @@
  #define _RAISONANCE_
 #elif defined(__ICCSTM8__)
  #define _IAR_
+#elif defined(__SDCC)   // SDCC patch: add compiler
+ #define _SDCC_
 #else
  #error "Unsupported Compiler!"          /* Compiler defines not found */
 #endif
@@ -137,6 +139,12 @@
   /*!< Used with memory Models for code less than 64K */
   #define MEMCPY memcpy
  #endif /* STM8S208 or STM8S207 or STM8S007 or STM8AF62Ax or STM8AF52Ax */ 
+#elif defined (_SDCC_)    // SDCC patch: mostly not required / not supported
+ #define FAR
+ #define NEAR
+ #define TINY
+ #define EEPROM
+ #define CONST  const
 #else /*_IAR_*/
  #define FAR  __far
  #define NEAR __near
@@ -170,6 +178,8 @@
    #define IN_RAM(a) a
  #elif defined (_RAISONANCE_) /* __RCST7__ */
    #define IN_RAM(a) a inram
+ #elif defined (_SDCC_)    // SDCC patch: code in RAM not yet patched
+  #define IN_RAM(a) a
  #else /*_IAR_*/
   #define IN_RAM(a) __ramfunc a
  #endif /* _COSMIC_ */
@@ -2729,6 +2739,15 @@ CFG_TypeDef;
  #define trap()                {_asm("trap\n");} /* Trap (soft IT) */
  #define wfi()                 {_asm("wfi\n");}  /* Wait For Interrupt */
  #define halt()                {_asm("halt\n");} /* Halt */
+#elif defined(_SDCC_)   // SDCC patch: for inline assembly
+ #define enableInterrupts()    __asm__("rim")    /* enable interrupts */
+ #define disableInterrupts()   __asm__("sim")    /* disable interrupts */
+ #define rim()                 __asm__("rim")    /* enable interrupts */
+ #define sim()                 __asm__("sim")    /* disable interrupts */
+ #define nop()                 __asm__("nop")    /* No Operation */
+ #define trap()                __asm__("trap")   /* Trap (soft IT) */
+ #define wfi()                 __asm__("wfi")    /* Wait For Interrupt */
+ #define halt()                __asm__("halt")   /* Halt */
 #else /*_IAR_*/
  #include <intrinsics.h>
  #define enableInterrupts()    __enable_interrupt()   /* enable interrupts */
@@ -2764,11 +2783,21 @@ CFG_TypeDef;
  __interrupt void (a) (void)  
 #endif /* _IAR_ */
 
+#ifdef _SDCC_       // SDCC patch: ISR handlers
+ #define INTERRUPT_HANDLER(a,b) void a() __interrupt(b)
+ #if (SKIP_TRAPS==0)   // SDCC patch: trap handling requires SDCC >=v3.4.3
+   #define INTERRUPT_HANDLER_TRAP(a) void a(void) __trap
+ #endif /* USE_TRAPS=1 */
+#endif /* _SDCC_ */
+
 /*============================== Interrupt Handler declaration ========================*/
 #ifdef _COSMIC_
  #define INTERRUPT @far @interrupt
 #elif defined(_IAR_)
  #define INTERRUPT __interrupt
+#elif defined(_SDCC_)     // SDCC patch: doesn't work, yet :-(
+  #define INTERRUPT __interrupt
+  #include "stm8s_it.h"   // assert inclusion in main.c
 #endif /* _COSMIC_ */
 
 /*============================== Handling bits ====================================*/
